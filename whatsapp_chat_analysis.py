# -*- coding: utf-8 -*-
"""Whatsapp chat analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16O7zPvhVndpewUKlJpQU_I9TqGb4HxUs
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
import re
import datetime as dt
# %matplotlib inline

f = open('WhatsApp Chat with 2018-2022 IT-B (1).txt','r',encoding='utf-8')

data = f.read()

dummy = data.split('\n')
dummy

pattern = '\d{1,2}/\d{1,2}/\d{2,4},\s\d{1,2}:\d{2}\s-\s'
messages = re.split(pattern,data)[1:]
print(len(messages))

dates = re.findall(pattern,data)
print(len(dates))

string = '16/08/18, 20:09 - '
string = string.split(',')
date,time = string[0],string[1]
time = time.split('-')
time = time[0].strip()
print(date+" and "+time)

def gettimeanddate(string):
    string = string.split(',')
    date,time = string[0],string[1]
    time = time.split('-')
    time = time[0].strip()

    return date+" "+time

df = pd.DataFrame({'user_messages':messages,
                   'message_date':dates})

df['message_date'] = df['message_date'].apply(lambda text:gettimeanddate(text))
df.rename(columns={'message_date':'date'},inplace=True)

df.head()

df['user_messages']

users = []
messages = []

for message in df['user_messages']:

    entry = re.split('([\w\W]+?):\s', message)
    if entry[1:]:
        users.append(entry[1])
        messages.append(entry[2])


    else:
        users.append('Group Notification')
        messages.append(entry[0])


df['User'] = users
df['message'] = messages


def getstring(text):
    return text.split('\n')[0]

df['message'] = df['message'].apply(lambda text:getstring(text))


df = df.drop(['user_messages'],axis=1)
df = df[['message','date','User']]

df = df.rename(columns={'message':'Message',
                       'date':'Date'})



df.head()

16/08/18 20:09

YYYY-MM-DD

df.shape

df['Only date'] = pd.to_datetime(df['Date']).dt.date

df['Year'] = pd.to_datetime(df['Date']).dt.year

df['Month_num'] = pd.to_datetime(df['Date']).dt.month

df['Month'] = pd.to_datetime(df['Date']).dt.month_name()

df['Day'] = pd.to_datetime(df['Date']).dt.day

df['Day_name'] = pd.to_datetime(df['Date']).dt.day_name()


df['Hour'] = pd.to_datetime(df['Date']).dt.hour

df['Minute'] = pd.to_datetime(df['Date']).dt.minute


df.head()

df[df['User'] == 'Jagss']

words = []
for message in df['Message']:
    words.extend(message.split())

print(len(words))

words

df[(df['Message'] == '<Media omitted>')&(df['User'] == 'Jagss')].shape

df['Message'].unique()

df[df['Message']=='<Media omitted>']



df['User'].value_counts().head()

counts = df['User'].value_counts().head()
plt.figure(figsize=(15,7))
plt.bar(counts.index,counts.values)
plt.xticks(rotation = 'vertical')

wordmap = {}
for message in df['Message']:
    dummy = message.split()
    for word in dummy:
        if word in wordmap:
            wordmap[word]+=1

        else:
            wordmap[word] = 1


wordmap = dict(sorted(wordmap.items(),key = lambda x:x[1],reverse = True))

wordmap

from collections import Counter
words = []
for message in df['Message']:
    words.extend(message.split())

wordmap = dict(Counter(words).most_common(20))
wordmap = dict(sorted(wordmap.items(),key=lambda x:x[1],reverse=True))
newdf = pd.DataFrame(wordmap.items())
newdf

a,an,the,you,ok,...

temp = df[(df['User']!='Group Notification') | (df['User']!='<Media omitted>')]
temp

def gettopwords(selecteduser,df):

    file = open('stop_hinglish.txt','r')
    stopwords = file.read()
    stopwords = stopwords.split('\n')

    if selecteduser!='Overall':
        df = df[df['User']==selecteduser]

    temp = df[(df['User']!='Group Notification') |
             (df['User']!='<Media omitted>')]

    words = []

    for message in df['Message']:
        for word in message.lower().split():
            if word not in stopwords:
                words.append(word)


    mostcommon = pd.DataFrame(Counter(words).most_common(20))
    return mostcommon



mostcommon = gettopwords('Overall',df)

mostcommon

import emoji

def emojihelp(selecteduser,df):

    if selecteduser!='Overall':
        df = df[df['User']==selecteduser]

    emojis = []
    for message in df['Message']:
        emojis.extend([c for c in message if c in emoji.UNICODE_EMOJI['en']])


    emojidf = pd.DataFrame(Counter(emojis).most_common(len(Counter(emojis))))

    return emojidf


dfmoji = emojihelp('Overall',df)
dfmoji

dfmoji.columns = ['Emoji','Count']
dfmoji

df.head()

def monthtimeline(selecteduser,df):


    temp = df.groupby(['Year','Month_num','Month']).count()['Message'].reset_index().sort_values(['Message'])

    time = []
    for i in range(temp.shape[0]):
        time.append(temp['Month'][i]+"-"+str(temp['Year'][i]))

    temp['Time'] = time

    return temp

df.head()

1,2,2,3,4,4,4,5,6,7,3,4


1| 2 2 | 3 3| 4 4 4 4 | 5 | 6 | 7

{4 : 4, 3:2 , 2:2,}

temp = df.groupby(['Year','Month_num','Month']).count()['Message'].reset_index()
temp

temp = df.groupby(['Year','Month_num','Month']).count()['Message'].reset_index()
temp

temp.shape

str(temp['Month'][0])+"-"+str(temp['Year'][0])

time = []
for i in range(temp.shape[0]):
    time.append(temp['Month'][i]+ "-" +str(temp['Year'][i]))

temp['Time'] = time

temp

temp

df.head()

temp1 = df['Day_name'].value_counts()

temp1

list(temp1.index)

list(temp1.values)

temp2 = df['Month'].value_counts()

temp2

list(temp2.index),list(temp2.values)



